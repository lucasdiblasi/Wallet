import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Minha carteira"
  String get walletPageTitle => "Minha carteira";
  /// "Posição consolidada"
  String get consolidatedPositionTitle => "Posição consolidada";
  /// "Carteira de investimentos"
  String get investmentWalletTitle => "Carteira de investimentos";
  /// "Evolução patrimonial"
  String get patrimonialEvolutionTitle => "Evolução patrimonial";
  /// "Rentabilidade da carteira"
  String get walletProfitabilityTitle => "Rentabilidade da carteira";
  /// "Disponivel para investir"
  String get avaibleToInvestTitle => "Disponivel para investir";
  /// "Mostrar"
  String get show => "Mostrar";
  /// "Esconder"
  String get hide => "Esconder";
  /// "A liquidar"
  String get toSettleTitle => "A liquidar";
  /// "${count} ativos"
  String assets(String count) => "${count} ativos";
  /// "${value}%"
  String percent(String value) => "${value}%";
  /// "qtd"
  String get quantity => "qtd";
  /// "Saldo Bruto"
  String get grossBalance => "Saldo Bruto";
  /// "Fundos de Investimentos"
  String get investmentFounds => "Fundos de Investimentos";
  /// "Ações e Futuro"
  String get actionsAndFuture => "Ações e Futuro";
  /// "Direct Treasure"
  String get directTreasure => "Direct Treasure";
  /// "Renda Fixa"
  String get fixedIncome => "Renda Fixa";
  /// "Previdência Privada"
  String get privatePension => "Previdência Privada";
}

class _I18n_pt_BR extends I18n {
  const _I18n_pt_BR();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "My wallet"
  @override
  String get walletPageTitle => "My wallet";
  /// "Consolidated position"
  @override
  String get consolidatedPositionTitle => "Consolidated position";
  /// "Investment wallet"
  @override
  String get investmentWalletTitle => "Investment wallet";
  /// "Patrimonial evolution"
  @override
  String get patrimonialEvolutionTitle => "Patrimonial evolution";
  /// "Wallet profitability"
  @override
  String get walletProfitabilityTitle => "Wallet profitability";
  /// "Available to invest"
  @override
  String get avaibleToInvestTitle => "Available to invest";
  /// "show"
  @override
  String get show => "show";
  /// "hide"
  @override
  String get hide => "hide";
  /// "To Settle"
  @override
  String get toSettleTitle => "To Settle";
  /// "${count} assets"
  @override
  String assets(String count) => "${count} assets";
  /// "${value}%"
  @override
  String percent(String value) => "${value}%";
  /// "Qtd"
  @override
  String get quantity => "Qtd";
  /// "Gross Balance"
  @override
  String get grossBalance => "Gross Balance";
  /// "Investments Founds"
  @override
  String get investmentFounds => "Investments Founds";
  /// "Actions and Future"
  @override
  String get actionsAndFuture => "Actions and Future";
  /// "Tesouro Direto"
  @override
  String get directTreasure => "Tesouro Direto";
  /// "Renda Fixa"
  @override
  String get fixedIncome => "Renda Fixa";
  /// "Private Pension"
  @override
  String get privatePension => "Private Pension";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("pt", "BR"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("pt_BR" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("pt" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}